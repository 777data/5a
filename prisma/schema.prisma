generator client {
  provider = "prisma-client-js"
  output   = "../node_modules/generated"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Application {
  id            String          @id @default(cuid())
  name          String
  environments  Environment[]
  authentications Authentication[]
  apiTests      ApiTest[]
  collections   Collection[]
  scheduledTests ScheduledTest[]
  organization  Organization?   @relation(fields: [organizationId], references: [id])
  organizationId String?
  owner         User           @relation(fields: [ownerId], references: [id])
  ownerId       String
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@index([organizationId])
  @@index([ownerId])
}

model Collection {
  id            String    @id @default(cuid())
  name          String
  description   String?
  color         String?
  application   Application @relation(fields: [applicationId], references: [id])
  applicationId String
  apis          Api[]
  scheduledTests ScheduledTest[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Api {
  id            String          @id @default(cuid())
  name          String
  url           String
  method        String         // "GET" | "POST" | "PUT" | "DELETE" | "PATCH"
  headers       Json?
  body          Json?
  order         Int            @default(0)
  collection    Collection      @relation(fields: [collectionId], references: [id])
  collectionId  String
  testResults   ApiTestResult[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Authentication {
  id            String          @id @default(cuid())
  name          String
  type          String?         // "API_KEY" | "BEARER_TOKEN"
  apiKey        String?
  token         String?
  application   Application     @relation(fields: [applicationId], references: [id])
  applicationId String
  apiTests      ApiTest[]
  scheduledTests ScheduledTest[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model Environment {
  id            String          @id @default(cuid())
  name          String
  application   Application     @relation(fields: [applicationId], references: [id])
  applicationId String
  variableValues VariableValue[]
  apiTests      ApiTest[]
  scheduledTests ScheduledTest[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model VariableValue {
  id            String      @id @default(uuid())
  name          String
  value         String
  environmentId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  environment   Environment @relation(fields: [environmentId], references: [id], onDelete: Cascade)

  @@unique([name, environmentId])
  @@index([environmentId])
}

model ApiTest {
  id              String          @id @default(cuid())
  sessionId       String          @unique
  startedAt       DateTime        @default(now())
  duration        Int             // en millisecondes
  status          String          // "SUCCESS" | "PARTIAL" | "FAILED"
  application     Application     @relation(fields: [applicationId], references: [id])
  applicationId   String
  environment     Environment     @relation(fields: [environmentId], references: [id])
  environmentId   String
  authentication  Authentication? @relation(fields: [authenticationId], references: [id])
  authenticationId String?
  results         ApiTestResult[]
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

model ApiTestResult {
  id            String          @id @default(cuid())
  statusCode    Int
  duration      Int             // en millisecondes
  response      Json
  error         String?
  apiTest       ApiTest         @relation(fields: [apiTestId], references: [id])
  apiTestId     String
  api           Api             @relation(fields: [apiId], references: [id])
  apiId         String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  password      String?
  createdAt     DateTime  @default(now())
  lastLogin     DateTime?
  accounts      Account[]
  sessions      Session[]
  organizations OrganizationMember[]
  applications  Application[]
}

model Organization {
  id            String          @id @default(cuid())
  name          String
  applications  Application[]
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  members       OrganizationMember[]
  invitations   OrganizationInvitation[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  role           String       @default("MEMBER") // "OWNER" | "ADMIN" | "MEMBER"
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt

  @@unique([organizationId, userId])
  @@index([userId])
  @@index([organizationId])
}

model ScheduledTest {
  id              String      @id @default(cuid())
  application     Application @relation(fields: [applicationId], references: [id])
  applicationId   String
  collections     Collection[]
  environmentId   String
  environment     Environment @relation(fields: [environmentId], references: [id])
  authenticationId String?
  authentication  Authentication? @relation(fields: [authenticationId], references: [id])
  cronExpression  String
  notificationEmails String[]
  isActive        Boolean     @default(true)
  lastRunAt       DateTime?
  createdAt       DateTime    @default(now())
  updatedAt       DateTime    @updatedAt
}

model OrganizationInvitation {
  id             String      @id @default(cuid())
  email          String
  token          String      @unique
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  organizationId String
  expiresAt      DateTime
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt

  @@index([organizationId])
}
